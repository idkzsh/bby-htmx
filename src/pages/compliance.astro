---
import Layout from "../layouts/Layout.astro";
import { headers, inputs, formats, unCodes } from "../data/compliance";

let columns: number = 1;
let setupData;
if (Astro.request.method === "POST") {
  try {
    setupData = await Astro.request.formData();
    columns = Number(setupData.get("columns"));
    console.log("Server-side setupData:", Object.fromEntries(setupData));
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

// Convert setupData to a plain object if it exists
const setupDataObject = setupData ? Object.fromEntries(setupData) : null;

---

<!-- unfortunately the cdn must be used for pdfjs as far as i can tell as it does not work very well on serverless as a dependency -->
<script
  src="https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.min.mjs"
  type="module"></script>

 <!-- Parses uploaded MSDS PDF files using pdf.js to extract text.  Sends text
to /api/gpt endpoint to extract battery details. * Populates dropdown with MSDS
filenames.  Autofills battery details when MSDS is selected.  -->
<script type="module">
  const { pdfjsLib } = globalThis;
  const msdsForm = document.getElementById("msdsForm");
  const spinner = document.getElementById("spinner"); // Get the spinner element

  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.mjs";

  const forms = {};

  // event listener for when the user uploads MSDS files
  msdsForm?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent default form submission
    // spinner.setAttribute("x-show", "true");

    const formData = new FormData(msdsForm);
    const files = formData.getAll("MSDS");

    // looping over all the files that the user uploaded
    for (const file of files) {
      forms[file.name] = [file.name];

      const pdfData = await file.arrayBuffer();
      const loadingTask = pdfjsLib.getDocument(pdfData);
      const pdf = await loadingTask.promise;

      let fullText = "";

      // Loop through each page to extract text
      for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
        const page = await pdf.getPage(pageNumber);
        const textContent = await page.getTextContent();
        textContent.items.forEach((item) => {
          if ("str" in item) {
            fullText += item.str + " ";
          } else if ("textContent" in item) {
            fullText += item.textContent + " ";
          }
        });
      }

      // send the file to GPT to extract watt hours, net weight and battery type
      const response = await fetch("/api/gpt", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ fullText }), // Send the fullText string in the request body
      });

      // Check if the request was successful
      if (response.ok) {
        const result = await response.json();
        forms[file.name]["batteryType"] = result.batteryType;
        forms[file.name]["wattHours"] = result.wattHours;
        forms[file.name]["totalMassKg"] = result.totalMassKg;
      } else {
        console.error("Error:", response.status);
      }
    }

    for (let i = 0; i <= 50; i++) {
      const inputId = `MSDS-${i}`; // Construct the input ID dynamically
      if (document.getElementById(inputId)) {
        const msds = document.getElementById(inputId);

        msds.innerHTML = "<option>Select MSDS</option>";

        Object.entries(forms).map(([key, val]) => {
          msds.innerHTML += `<option value=${key}>${key}</option>`;
        });
        // this event listener is for when the user selects one of the MSDS forms from the dropdown menu,
        // it will autofill the BATTERY_TYPE, WATT_HOURS and BATTERY_WEIGHT inputs with the response data from GPT
        msds.addEventListener("change", (event) => {
          const selection = event.target.value;
          const battType = document.getElementById(`BATTERY_TYPE-${i}`);
          const wattHours = document.getElementById(`WATT_HOURS-${i}`);
          const netWeight = document.getElementById(`BATTERY_WEIGHT-${i}`);
          battType.value =
            forms[selection]["batteryType"] === "Lithium Ion" ||
            forms[selection]["batteryType"] === "Li-ion Polymer"
              ? "Lithium-Ion"
              : null;
          wattHours.value = forms[selection]["wattHours"];
          netWeight.value = forms[selection]["totalMassKg"];
        });
      } else {
        break;
      }
    }

    msdsForm.reset();
  });

  // looping through however many columns there are
</script>

<Layout>

  <main
  class="flex w-[90%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll" id="main"
>

<form action="/api/email" method="POST" id="complianceForm" class="hidden">
  <!-- Hidden inputs will be dynamically added here -->
</form>
<div id="handsontable-container" class="w-full h-[400px]"></div>
</main>

  <!-- <nav
    class="flex h-12 w-full border-b items-center px-2 justify-between fixed top-20 bg-background z-40"
  >
    <div class="flex gap-2">
      <form
        x-data="{ fileSelected: false }"
        action=""
        name="msdsForm"
        id="msdsForm"
        class="flex w-auto"
        enctype="multipart/form-data"
        method="POST"
      >
        <input
          name="MSDS"
          id="MSDS"
          type="file"
          accept=".pdf"
          @change="fileSelected = $event.target.files.length > 0"
          multiple
        />

      </form>
    </div>
    <button class="btn text-xs" type="submit" form="complianceForm"
      >Submit</button
    >
  </nav> -->


    <!-- <ComplianceSidebar obj={headers} /> -->
<!-- 
    <ComplianceColumn
      columns={columns}
      obj={inputs}
      formName="complianceForm"
      setupData={setupData}
      email={email}
    /> -->

</Layout>

<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />

<script define:vars={{ headers, columns, setupDataObject }}>
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("handsontable-container");

    const headerNames = Object.keys(headers);
    const rows = headerNames.length;

    const data = Array(rows)
      .fill()
      .map(() => Array(columns).fill(""));

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: headerNames,
      colHeaders: Array(columns)
        .fill()
        .map((_, i) => `SKU ${i + 1}`),
      height: "100%",
      width: "100%",
      licenseKey: "non-commercial-and-evaluation",
      cells: function (row, col) {
        const cellProperties = {};
        const rowHeader = headerNames[row];
        cellProperties.placeholder = headers[rowHeader];

        // Add validator for VPN row
        const requiredFields = ["Vendor Part Number"];

        // Add required validator to specified fields
        if (requiredFields.includes(rowHeader)) {
          cellProperties.validator = function (value, callback) {
            callback(value !== null && value !== "");
          };
          cellProperties.allowEmpty = false;
        }

        switch (rowHeader) {
          case "Vendor Part Number":
            cellProperties.validator = function (value, callback) {
              if (value.length <= 20) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
          case "SKU Title (Long)":
            cellProperties.validator = function (value, callback) {
              if (value.length <= 40) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
          case "UPC":
            cellProperties.validator = function (value, callback) {
              const numericValue = value.toString().replace(/\D/g, "");
              const isValid =
                numericValue.length >= 12 && numericValue.length <= 13;
              callback(isValid);
            };
            cellProperties.allowInvalid = false;
            break;
        }

        return cellProperties;
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: "all",
      // Set the width of the row header column
      rowHeaderWidth: 250,
      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
    });

    document.addEventListener("submitComplianceForm", function () {
      const requiredFields = ["MSDS"];
      const missingFields = [];

      // Check required fields
      requiredFields.forEach((field, rowIndex) => {
        for (let col = 0; col < columns; col++) {
          const cellValue = hot.getDataAtCell(rowIndex, col);
          if (!cellValue || cellValue.trim() === "") {
            missingFields.push(`${field} for SKU ${col + 1}`);
          }
        }
      });

      if (missingFields.length > 0) {
        alert(
          `Please fill in the following required fields:\n${missingFields.join("\n")}`
        );
        return;
      }

      complianceForm
        .querySelectorAll('input[type="hidden"]')
        .forEach((input) => input.remove());

      // Add hidden input for columns
      const columnsInput = document.createElement("input");
      columnsInput.type = "hidden";
      columnsInput.name = "columns";
      columnsInput.value = columns;
      complianceForm.appendChild(columnsInput);

      if (setupDataObject) {
          for (let [key, value] of Object.entries(setupDataObject)) {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = `setupData_${key}`;
            input.value = value;
            complianceForm.appendChild(input);
          }
        } else {
          console.log("No setupData available");
        }

      // Add hidden inputs with Handsontable data
      const tableData = hot.getData();
      headerNames.forEach((header, rowIndex) => {
        const rowData = tableData[rowIndex];
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = header;
        input.value = JSON.stringify(rowData);
        complianceForm.appendChild(input);
      });

      // Submit the form
      complianceForm.submit();
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }
</style>