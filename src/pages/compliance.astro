---
import Layout from "../layouts/Layout.astro";
import { complianceInputs } from "../data/compliance";
import MSDSinfo from "../components/MSDSinfo.astro";

const referer = Astro.request.headers.get("referer");
const isLinkClick = referer && new URL(referer).hostname === Astro.url.hostname;

if (isLinkClick === null) {
  return Astro.redirect("/");
}

let columns: number = 1;
let setupData;

const setupDataJSON: Record<string, string> = {};

if (Astro.request.method === "POST") {
  try {
    setupData = await Astro.request.formData();
    columns = Number(setupData.get("columns"));

    // Convert setupData to a JSON object so we don't need to do string manipulation
    for (const [key, value] of setupData.entries()) {
      setupDataJSON[key] = typeof value === "string" ? value : value.name;
    }

    // Parse array-like strings into actual arrays
    for (const key in setupDataJSON) {
      if (
        setupDataJSON[key].startsWith("[") &&
        setupDataJSON[key].endsWith("]")
      ) {
        try {
          setupDataJSON[key] = JSON.parse(setupDataJSON[key]);
        } catch (e) {
          console.error(`Failed to parse ${key} as JSON:`, e);
        }
      }
    }

    // console.log("Server-side setupDataJSON:", setupDataJSON);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

// Convert setupData to a plain object if it exists
// const setupDataObject = setupData ? Object.fromEntries(setupData) : null;
console.log("compliance page: " + JSON.stringify(setupDataJSON));
---

<!-- unfortunately the cdn must be used for pdfjs as far as i can tell as it does not work very well on serverless as a dependency -->
<script
  src="https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.min.mjs"
  type="module"></script>

<!-- Parses uploaded MSDS PDF files using pdf.js to extract text.  Sends text
to /api/gpt endpoint to extract battery details. * Populates dropdown with MSDS
filenames.  Autofills battery details when MSDS is selected.  --><!-- <script type="module">
  const { pdfjsLib } = globalThis;
  const msdsForm = document.getElementById("msdsForm");
  const spinner = document.getElementById("spinner"); // Get the spinner element

  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.mjs";

  const forms = {};

  // event listener for when the user uploads MSDS files
  msdsForm?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent default form submission
    // spinner.setAttribute("x-show", "true");

    const formData = new FormData(msdsForm);
    const files = formData.getAll("MSDS");

    // looping over all the files that the user uploaded
    for (const file of files) {
      forms[file.name] = [file.name];

      const pdfData = await file.arrayBuffer();
      const loadingTask = pdfjsLib.getDocument(pdfData);
      const pdf = await loadingTask.promise;

      let fullText = "";

      // Loop through each page to extract text
      for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
        const page = await pdf.getPage(pageNumber);
        const textContent = await page.getTextContent();
        textContent.items.forEach((item) => {
          if ("str" in item) {
            fullText += item.str + " ";
          } else if ("textContent" in item) {
            fullText += item.textContent + " ";
          }
        });
      }

      // send the file to GPT to extract watt hours, net weight and battery type
      const response = await fetch("/api/gpt", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ fullText }), // Send the fullText string in the request body
      });

      // Check if the request was successful
      if (response.ok) {
        const result = await response.json();
        forms[file.name]["batteryType"] = result.batteryType;
        forms[file.name]["wattHours"] = result.wattHours;
        forms[file.name]["totalMassKg"] = result.totalMassKg;
      } else {
        console.error("Error:", response.status);
      }
    }

    for (let i = 0; i <= 50; i++) {
      const inputId = `MSDS-${i}`; // Construct the input ID dynamically
      if (document.getElementById(inputId)) {
        const msds = document.getElementById(inputId);

        msds.innerHTML = "<option>Select MSDS</option>";

        Object.entries(forms).map(([key, val]) => {
          msds.innerHTML += `<option value=${key}>${key}</option>`;
        });
        // this event listener is for when the user selects one of the MSDS forms from the dropdown menu,
        // it will autofill the BATTERY_TYPE, WATT_HOURS and BATTERY_WEIGHT inputs with the response data from GPT
        msds.addEventListener("change", (event) => {
          const selection = event.target.value;
          const battType = document.getElementById(`BATTERY_TYPE-${i}`);
          const wattHours = document.getElementById(`WATT_HOURS-${i}`);
          const netWeight = document.getElementById(`BATTERY_WEIGHT-${i}`);
          battType.value =
            forms[selection]["batteryType"] === "Lithium Ion" ||
            forms[selection]["batteryType"] === "Li-ion Polymer"
              ? "Lithium-Ion"
              : null;
          wattHours.value = forms[selection]["wattHours"];
          netWeight.value = forms[selection]["totalMassKg"];
        });
      } else {
        break;
      }
    }

    msdsForm.reset();
  });
</script> -->
<Layout>
  <main
    class="flex w-[89.5%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll"
    id="main"
  >
    <form action="/assets" method="POST" id="complianceForm" class="hidden">
      <input
        type="hidden"
        name="setupData"
        id="setupDataInput"
        value={JSON.stringify(setupDataJSON)}
      />
      <input type="hidden" id="selectedFilesInput" name="selectedFiles" />
      <!-- Hidden inputs will be dynamically added here -->
    </form>
    <div id="handsontable-container" class="w-full h-[400px]"></div>
  </main>

  <!-- <nav
    class="flex h-12 w-full border-b items-center px-2 justify-between fixed top-20 bg-background z-40"
  >
    <div class="flex gap-2">
      <form
        x-data="{ fileSelected: false }"
        action=""
        name="msdsForm"
        id="msdsForm"
        class="flex w-auto"
        enctype="multipart/form-data"
        method="POST"
      >
        <input
          name="MSDS"
          id="MSDS"
          type="file"
          accept=".pdf"
          @change="fileSelected = $event.target.files.length > 0"
          multiple
        />

      </form>
    </div>
    <button class="btn text-xs" type="submit" form="complianceForm"
      >Submit</button
    >
  </nav> -->
  <div
    id="complianceModal"
    class="justify-center items-center modal hidden absolute overflow-y-auto h-full w-full z-[9999] bg-black bg-opacity-50"
  >
    <div
      class="flex flex-col justify-evenly w-[40%] h-[50%] shadow-lg rounded-md bg-white p-4 border"
    >
      <h3 class="text-lg font-semibold">Upload MSDS Files</h3>
      <ul class="list-disc pl-8 ml-4">
        <li>
          <MSDSinfo
            batteryType="Lithium-Ion"
            requirements={[
              "UN Number",
              "Watt hour (WH) rating + Battery net weight (kg)",
            ]}
            tooltip="lithiumIon"
          />
        </li>
        <li>
          <MSDSinfo
            batteryType="Lithium Metal"
          requirements={[
            "UN Number",
            "Lithium Content (g) + Battery net weight (kg)",
          ]}
            tooltip="lithiumMetal"
          />
        </li>
        <li>
          <MSDSinfo
            batteryType="Limited Quantities"
          requirements={[
            "UN Number",
            "if product is a solid: mass per unit in kilograms (kg)",
            "if product is a liquid, compressed gas, or aerosol canister: volume of the container in liters (L)",
            "information specific to the product in question",
          ]}
            tooltip="limitedQuantities"
          />
        </li>
      </ul>
      <form
        id="msdsForm"
        name="msdsForm"
        method="POST"
        enctype="multipart/form-data"
      >
        <input
          type="file"
          class="mb-4 w-full p-2 border rounded"
          id="msdsFileInput"
          name="msdsFileInput"
          accept=".pdf"
          multiple
        />
        <div
          id="msdsPreview"
          class="mb-4 w-full h-36 border-dashed border-2 border-gray-300 rounded-md p-2 overflow-y-scroll overflow-x-hidden"
        >
        </div>
        <div class="flex justify-between">
          <button
            type="submit"
            id="uploadMsds"
            class="text-xs bg-black text-white px-4 py-2 rounded-md hover:opacity-80"
            >Upload MSDS</button
          >
          <button
            type="button"
            id="closeModal"
            class="text-xs bg-black text-white px-4 py-2 rounded-md hover:opacity-80"
            >Close</button
          >
        </div>
      </form>
    </div>
  </div>
</Layout>

<script
  src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"
></script>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css"
/>

<script
  define:vars={{
    columns,
    setupDataJSON,
    complianceInputs,
  }}
>
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("handsontable-container");

    const rows = complianceInputs.length;

    let headerNames = complianceInputs.map((input) => input.name);

    const data = Array(rows)
      .fill()
      .map((_, rowIndex) =>
        Array(columns)
          .fill()
          .map((_, colIndex) => {
            const inputName = complianceInputs[rowIndex].name;
            if (
              setupDataJSON[inputName] &&
              Array.isArray(setupDataJSON[inputName])
            ) {
              return setupDataJSON[inputName][colIndex] || "";
            }
            return "";
          })
      );

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: complianceInputs.map((input) => input.name),
      rowHeaderWidth: 250, // Adjust this value as needed
      afterGetRowHeader: function (row, TH) {
        const rowName = complianceInputs[row].name;

        if (complianceInputs[row].type === "readonly") {
          TH.style.fontWeight = "bold";
          TH.style.backgroundColor = "#c0c0c0";
        }
        if (rowName.includes("Battery Type") || rowName.includes("- UN")) {
          TH.style.fontWeight = "bold";
          TH.style.backgroundColor = "#d0d0f0";
        }

        if (rowName === "VENDOR ACKNOWLEDGEMENT") {
          TH.style.fontWeight = "bold";
          TH.style.backgroundColor = "#F3F0c0";
        }
        // Force text wrapping for all row headers
        TH.style.whiteSpace = "normal";
        TH.style.overflow = "visible";
        TH.style.textAlign = "left";
      },
      colHeaders: Array(columns)
        .fill()
        .map((_, i) => `SKU ${i + 1}`),
      height: "100%",
      width: "100%",

      licenseKey: "non-commercial-and-evaluation",
      cells: function (row, col) {
        const cellProperties = {};
        const rowName = complianceInputs[row].name; // Adjust for the two extra rows

        const input = complianceInputs.find((input) => input.name === rowName);
        if (input) {
          switch (input.type) {
            case "text":
              cellProperties.type = "text";
              cellProperties.placeholder = input.placeholder;
              cellProperties.validator = function (value, callback) {
                callback(
                  typeof value === "string" &&
                    value.length >= input.minLen &&
                    value.length <= input.maxLen
                );
              };

              break;

            case "select":
              cellProperties.type = "dropdown";
              cellProperties.placeholder = input.placeholder;

              if (rowName.endsWith("- Size/Format")) {
                const batteryTypeIndex = rowName.split(" ")[0];
                const batteryTypeRow = complianceInputs.findIndex(
                  (input) => input.name === `${batteryTypeIndex} - Battery Type`
                );

                cellProperties.source = function (query, process) {
                  const batteryType = this.instance.getDataAtCell(
                    batteryTypeRow,
                    this.col
                  );

                  let options = [];
                  if (
                    input.options &&
                    typeof input.options === "object" &&
                    batteryType
                  ) {
                    options = input.options[batteryType] || [];
                  }

                  console.log(`Dropdown options for ${rowName}:`, options);
                  process(options);
                };
              } else {
                cellProperties.source = Array.isArray(input.options)
                  ? input.options
                  : Object.values(input.options);
              }
              break;

            case "number":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0" };
              cellProperties.placeholder = input.placeholder;
              cellProperties.validator = function (value, callback) {
                if (value === null || value === "") {
                  callback(true); // Allow empty values
                } else {
                  callback(
                    typeof value === "number" &&
                      value >= input.min &&
                      value <= input.max
                  );
                }
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              break;

            case "float":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0,0.0000" };
              cellProperties.placeholder = input.placeholder;
              cellProperties.validator = function (value, callback) {
                if (value === null || value === "") {
                  callback(true); // Allow empty values
                } else {
                  callback(
                    typeof value === "number" &&
                      value >= input.min &&
                      value <= input.max
                  );
                }
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
                if (value === "" || value === null) {
                  td.innerHTML = input.placeholder || "0.0000";
                }
              };
              break;

            case "readonly":
              cellProperties.readOnly = true;
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.TextRenderer.apply(this, arguments);
                td.style.backgroundColor = "#c0c0c0";
                td.style.textAlign = "center";
                td.style.verticalAlign = "middle";
              };
              break;
          }
        }

        if (rowName === "VENDOR ACKNOWLEDGEMENT") {
          cellProperties.renderer = function (
            instance,
            td,
            row,
            col,
            prop,
            value,
            cellProperties
          ) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.backgroundColor = "#F3F0c0";
          };
        }

        if (rowName.includes("Battery Type") || rowName.includes("- UN")) {
          cellProperties.placeholder = input.placeholder;
          cellProperties.renderer = function (
            instance,
            td,
            row,
            col,
            prop,
            value,
            cellProperties
          ) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.backgroundColor = "#d0d0f0";
          };
        }
        return cellProperties;
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: "all",
      // Set the width of the row header column
      rowHeaderWidth: 250,
      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
      fixedRowsTop: 4,
    });

    document.addEventListener("submitComplianceForm", function () {
      const missingFields = [];
      const data = hot.getData();

      for (let col = 0; col < columns; col++) {
        const dangerousGoods = setupDataJSON["Dangerous Product/Material"][col];
        const vendorAcknowledgement =
          data[
            complianceInputs.findIndex(
              (input) => input.name === "VENDOR ACKNOWLEDGEMENT"
            )
          ][col];

        if (dangerousGoods === "Y_1") {
          // const batteryFields = [
          //   "Battery Type - UN 3480",
          //   "Battery Type - UN 3481",
          //   "Battery Type - UN 3090",
          //   "Battery Type - UN 3091",
          // ];
          // const limitedQuantityField = "Limited Quantities";

          // const hasBattery = batteryFields.some(
          //   (field) =>
          //     data[complianceInputs.findIndex((input) => input.name === field)][
          //       col
          //     ] !== ""
          // );
          // const hasLimitedQuantity =
          //   data[
          //     complianceInputs.findIndex(
          //       (input) => input.name === limitedQuantityField
          //     )
          //   ][col] !== "";

          // if (!hasBattery && !hasLimitedQuantity) {
          //   missingFields.push(
          //     `At least one Battery Type or Limited Quantities for SKU ${col + 1}`
          //   );
          // }

          if (vendorAcknowledgement !== "Y") {
            missingFields.push(
              `Vendor Acknowledgement must be Y for SKU ${col + 1}`
            );
          }
        }
      }

      if (missingFields.length > 0) {
        alert(
          `Dangerous Goods was selected for below SKUs. Please fill in the following required fields:\n${missingFields.join("\n")}`
        );
        return;
      }

      // Add hidden input for columns
      const columnsInput = document.createElement("input");
      columnsInput.type = "hidden";
      columnsInput.name = "columns";
      columnsInput.value = columns;
      complianceForm.appendChild(columnsInput);

      // Add hidden inputs with Handsontable data
      const tableData = hot.getData();
      headerNames.forEach((header, rowIndex) => {
        const rowData = tableData[rowIndex];
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = header;
        input.value = JSON.stringify(rowData);
        complianceForm.appendChild(input);
      });

      // Submit the form
      complianceForm.submit();
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const complianceForm = document.getElementById("complianceForm");
    let selectedFiles = [];

    document.addEventListener("filesSelected", function (event) {
      selectedFiles = event.detail;
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("complianceModal");
    const btn = document.getElementById("msds-file-upload");
    const closeBtn = document.getElementById("closeModal");

    btn.onclick = function () {
      modal.classList.remove("hidden");
      modal.classList.add("flex");
    };

    closeBtn.onclick = function () {
      modal.classList.add("hidden");
      modal.classList.remove("flex");
    };

    window.onclick = function (event) {
      if (event.target == modal) {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
      }
    };
  });

  document.addEventListener("DOMContentLoaded", function () {
    const fileInput = document.getElementById("msdsFileInput");
    const hiddenInput = document.getElementById("selectedFilesInput");

    fileInput?.addEventListener("change", function () {
      if (
        hiddenInput instanceof HTMLInputElement &&
        fileInput instanceof HTMLInputElement
      ) {
        hiddenInput.value = Array.from(fileInput.files || [])
          .map((file) => file.name)
          .join(", ");
      }
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const fileInput = document.getElementById("msdsFileInput");
    const msdsPreview = document.getElementById("msdsPreview");
    const msdsForm = document.getElementById("msdsForm");
    let uploadedFiles = new Set(); // To keep track of unique files

    fileInput?.addEventListener("change", function (event) {
      if (event.target instanceof HTMLInputElement) {
        selectedFiles = Array.from(event.target.files || []);
      }
    });

    msdsForm?.addEventListener("submit", function (event) {
      event.preventDefault();
      msdsPreview.innerHTML = ''; // Clear previous preview
      selectedFiles.forEach((file, index) => {
        const fileItem = document.createElement("div");
        fileItem.className = "mb-2";
        fileItem.textContent = `${index + 1}. ${file.name}`;
        msdsPreview.appendChild(fileItem);
      });

      if (fileInput instanceof HTMLInputElement) {
        fileInput.value = '';
      }
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }

  .handsontable .gray-background {
    background-color: #f0f0f0 !important;
  }
</style>
