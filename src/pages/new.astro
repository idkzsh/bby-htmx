---
import { d, smartsheets } from "../data/hierarchy";
import Layout from "../layouts/Layout.astro";
const isHTMXRequest = Astro.request.headers.get("HX-Request") === "true";

let selectedDept = 0;
---

{
  isHTMXRequest ? (
    <form
      action="/setup"
      class="border rounded-md flex flex-col p-4 gap-4 shadow-md font-normal text-base tracking-tight"
      id="new"
    >
      <label for="email">Email</label>
      <input name="email" id="email" type="email" autocomplete="email" class="border rounded-md p-1 w-80" />
      <label for="department">Product Type</label>
      <select
        name="department"
        id="department"
        class="border h-10 rounded-md px-2 overflow-hidden w-80"
      >
        {d.map((category, index) => (
          <option value={category.dept} title={category.value}>
                {category.value.length > 40
                  ? category.value.slice(0, 37) + "..."
                  : category.value}
          </option>
        ))}
      </select>
      <label for="subCategory" class="hidden">Sub Category</label>
      <select name="subCategory" id="subCategory" class="border h-10 rounded-md px-2 overflow-hidden w-80 hidden">
        <option value="">Select a sub-category</option>
  {smartsheets.map((category) => (
    category.value.map((item) => (
      <option value={item} data-dept={category.dept}>{item}</option>
    ))
  ))}
      </select>
      <label for="numOfSKUs"># of SKUs</label>
      <input name="numOfSKUs" id="numOfSKUs" type="number" class="border rounded-md p-1" />
      <button
        type="submit"
        form="new"
        class="w-80 hover:opacity-80 bg-black text-white rounded-md p-2"
      >
        Submit
      </button>
    </form>

<script>

    const dept = document.getElementById("department");
    const subCategory = document.getElementById("subCategory");
    
    if (dept instanceof HTMLSelectElement && subCategory instanceof HTMLSelectElement) {
      dept.addEventListener("change", () => {
        const selectedDept = Number(dept.value);
        console.log(selectedDept)
        
        // Show/hide subCategory based on selection
        if (selectedDept === 9) {
          subCategory.classList.remove("hidden");
          subCategory.previousElementSibling?.classList.remove("hidden");
        } else {
          subCategory.classList.add("hidden");
          subCategory.previousElementSibling?.classList.add("hidden");
        }
        
        // Filter and show only relevant options
        Array.from(subCategory.options).forEach(option => {
          if (option instanceof HTMLOptionElement) {
            option.style.display = option.dataset.dept === String(selectedDept) ? "" : "none";
          }
        });
        
        // Reset selection
        subCategory.selectedIndex = 0;
      });
    }

</script>


  ) : (
    <Layout title="new">
      <main
        class="flex flex-col w-[89.5%] h-[98%] bg-white mt-2 rounded-md border justify-center items-center gap-8 font-bold tracking-tighter text-3xl"
        id="main"
      >
        <form
          action="/setup"
          class="border rounded-md flex flex-col p-4 gap-4 shadow-md font-normal text-base tracking-tight"
          id="new"
        >
          <label for="email">Email</label>
          <input name="email" id="email" type="email" autocomplete="email" class="border rounded-md p-1 w-80" />
          <label for="department">Product Type</label>
          <select
            name="department"
            id="department"
            class="border h-10 rounded-md px-2 w-80"
          >
            {d.map((category, index) => (
              <option value={category.dept} title={category.value}>
                {category.value.length > 40
                  ? category.value.slice(0, 37) + "..."
                  : category.value}
              </option>
            ))}
          </select>
          <label for="subCategory" class="hidden">Sub Category</label>
          <select name="subCategory" id="subCategory" class="border h-10 rounded-md px-2 overflow-hidden w-80 hidden">
        <option value="">Select a sub-category</option>
  {smartsheets.map((category) => (
    category.value.map((item) => (
      <option value={item} data-dept={category.dept}>{item}</option>
    ))
  ))}
      </select>
          <label for="numOfSKUs"># of SKUs</label>
          <input name="numOfSKUs" id="numOfSKUs" type="number" class="border rounded-md p-1" />
          <button
            type="submit"
            form="new"
            class="w-80 hover:opacity-80 bg-black text-white rounded-md p-2"
          >
            Submit
          </button>
        </form>
      </main>
    </Layout>


<script  define:vars={{initialSelectedDept: selectedDept}} >
  console.log(document.getElementById("department"))
  document.addEventListener("DOMContentLoaded", () => {
    const dept = document.getElementById("department");
    const subCategory = document.getElementById("subCategory");
    
    if (dept instanceof HTMLSelectElement && subCategory instanceof HTMLSelectElement) {
      dept.addEventListener("change", () => {
        const selectedDept = Number(dept.value);
        console.log(selectedDept)
        
        // Show/hide subCategory based on selection
        if (selectedDept === 9) {
          subCategory.classList.remove("hidden");
          subCategory.previousElementSibling?.classList.remove("hidden");
        } else {
          subCategory.classList.add("hidden");
          subCategory.previousElementSibling?.classList.add("hidden");
        }
        
        // Filter and show only relevant options
        Array.from(subCategory.options).forEach(option => {
          if (option instanceof HTMLOptionElement) {
            option.style.display = option.dataset.dept === String(selectedDept) ? "" : "none";
          }
        });
        
        // Reset selection
        subCategory.selectedIndex = 0;
      });
    }
  });
</script>
  )



}

