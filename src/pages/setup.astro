---
import Layout from "../layouts/Layout.astro";
import { headers, inputs } from "../data/setup";
import * as xlsx from "xlsx";

let columns = Number(Astro.url.searchParams.get("numOfSKUs") || 1);

if (columns > 50) {
  columns = 50;
}

let excelData;

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const excelFile = data.get("excelFileInput");
    await new Promise((resolve) => setTimeout(resolve, 1000));
    if (excelFile instanceof File) {
      const fileBuffer = await excelFile.arrayBuffer();
      const workbook = xlsx.read(fileBuffer, { type: "array" });
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      excelData = xlsx.utils.sheet_to_json(worksheet);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      excelData = null;
    }
  }
}
---

<Layout title="Setup">
  <main
    class="flex w-[90%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll"
    id="main"
  >
    <form action="/compliance" method="POST" id="setupForm" class="hidden">
      <!-- Hidden inputs will be dynamically added here -->
    </form>
    <div id="handsontable-container" class="w-full h-[400px]"></div>
    <!-- <form
        class="flex items-center justify-center gap-2 w-[600px]"
        id="uploadForm"
        name="uploadForm"
        method="POST"
        enctype="multipart/form-data"
      >
        Import Excel File: <input
          type="file"
          class="flex items-center justify-center pt-[2px] pl-[2px] w-60 rounded-md h-8"
          id="excelFileInput"
          name="excelFileInput"
          accept=".csv, .xlsx, .xlsb"
        />
        <input type="hidden" name="columns" value={columns} />
        <div class="relative w-24">
          <button class="btn text-xs" type="submit" @click="loading = true" :disabled="!fileSelected">Upload</button>
        </div>
      </form> -->

    <!-- <Sidebar obj={headers} />
      <SetupColumn
      obj={inputs}
      columns={columns}
      formName="setupForm"
      data={excelData}
    /> -->
  </main>
</Layout>


<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />

<script define:vars={{ headers, columns }} type="module" defer>


  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("handsontable-container");

    const headerNames = Object.keys(headers);
    const rows = headerNames.length;

    const data = Array(rows)
      .fill()
      .map(() => Array(columns).fill(""));

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: headerNames,
      colHeaders: Array(columns)
        .fill()
        .map((_, i) => `SKU ${i + 1}`),
      height: "100%",
      width: "100%",
      licenseKey: "non-commercial-and-evaluation",
      cells: function (row, col) {
        const cellProperties = {};
        const rowHeader = headerNames[row];
        cellProperties.placeholder = headers[rowHeader];

        // Add validator for VPN row
        const requiredFields = ["Vendor Part Number"];

        // Add required validator to specified fields
        if (requiredFields.includes(rowHeader)) {
          cellProperties.validator = function (value, callback) {
            callback(value !== null && value !== "");
          };
          cellProperties.allowEmpty = false;
        }

        switch (rowHeader) {
          case "Vendor Part Number":
            cellProperties.validator = function (value, callback) {
              if (value.length <= 20) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
          case "SKU Title (Long)":
            cellProperties.validator = function (value, callback) {
              if (value.length <= 40) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
          case "UPC":
            cellProperties.validator = function (value, callback) {
              const numericValue = value.toString().replace(/\D/g, "");
              const isValid =
                numericValue.length >= 12 && numericValue.length <= 13;
              callback(isValid);
            };
            cellProperties.allowInvalid = false;
            break;
        }

        return cellProperties;
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: "all",
      // Set the width of the row header column
      rowHeaderWidth: 250,
      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
    });

    document.addEventListener("submit-handsontable", function () {
      const requiredFields = ["Vendor Part Number"];
      const missingFields = [];

      // Check required fields
      requiredFields.forEach((field, rowIndex) => {
        for (let col = 0; col < columns; col++) {
          const cellValue = hot.getDataAtCell(rowIndex, col);
          if (!cellValue || cellValue.trim() === "") {
            missingFields.push(`${field} for SKU ${col + 1}`);
          }
        }
      });

      if (missingFields.length > 0) {
        alert(
          `Please fill in the following required fields:\n${missingFields.join("\n")}`
        );
        return;
      }

      setupForm
        .querySelectorAll('input[type="hidden"]')
        .forEach((input) => input.remove());

      // Add hidden input for columns
      const columnsInput = document.createElement("input");
      columnsInput.type = "hidden";
      columnsInput.name = "columns";
      columnsInput.value = columns;
      setupForm.appendChild(columnsInput);

      // Add hidden inputs with Handsontable data
      const tableData = hot.getData();
      headerNames.forEach((header, rowIndex) => {
        const rowData = tableData[rowIndex];
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = header;
        input.value = JSON.stringify(rowData);
        setupForm.appendChild(input);
      });

      // Submit the form
      setupForm.submit();
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }
</style>
