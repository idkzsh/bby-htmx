---
import Layout from "../layouts/Layout.astro";
import { inputs } from "../data/setup";

let columns = Number(Astro.url.searchParams.get("numOfSKUs") || 1);
let email = Astro.url.searchParams.get("email") || "";

if (columns > 50) {
  columns = 50;
} else if (columns <= 0) {
  columns = 1;
}
---

<Layout title="Setup">
  <main
    class="flex w-[90%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll"
    id="main"
  >
    <form action="/compliance" method="POST" id="setupForm" class="hidden">
      <!-- Hidden inputs will be dynamically added here -->
    </form>
    <div id="handsontable-container" class="w-full h-[400px]"></div>
    <!-- <form
        class="flex items-center justify-center gap-2 w-[600px]"
        id="uploadForm"
        name="uploadForm"
        method="POST"
        enctype="multipart/form-data"
      >
        Import Excel File: <input
          type="file"
          class="flex items-center justify-center pt-[2px] pl-[2px] w-60 rounded-md h-8"
          id="excelFileInput"
          name="excelFileInput"
          accept=".csv, .xlsx, .xlsb"
        />
        <input type="hidden" name="columns" value={columns} />
        <div class="relative w-24">
          <button class="btn text-xs" type="submit" @click="loading = true" :disabled="!fileSelected">Upload</button>
        </div>
      </form> -->
  </main>
</Layout>

<script
  src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"
></script>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css"
/>

<script define:vars={{ columns, email, inputs }} type="module" defer>
  class DateTimeEditor extends Handsontable.editors.TextEditor {
    constructor(hotInstance) {
      super(hotInstance);
    }

    createElements() {
      super.createElements();

      this.dateInput = document.createElement("input");
      this.dateInput.setAttribute("type", "date");
      this.dateInput.style.width = "150px";

      this.timeInput = document.createElement("input");
      this.timeInput.setAttribute("type", "time");
      this.timeInput.style.width = "120px";

      this.TEXTAREA.parentElement.appendChild(this.dateInput);
      this.TEXTAREA.parentElement.appendChild(this.timeInput);
      this.TEXTAREA.style.display = "none";

      const today = new Date().toISOString().split("T")[0];
      this.dateInput.setAttribute("min", today);
    }

    getValue() {
      return `${this.dateInput.value} ${this.timeInput.value}`;
    }

    setValue(value) {
      if (value && typeof value === "string") {
        const [date, time] = value.split(" ");
        this.dateInput.value = date;
        this.timeInput.value = time || "";
      } else {
        this.dateInput.value = "";
        this.timeInput.value = "";
      }
    }

    open() {
      super.open();
      const [date, time] = (this.originalValue || "").split(" ");
      this.dateInput.value = date || "";
      this.timeInput.value = time || "";
    }
  }

  function parseDate(dateString) {
    const [datePart, timePart] = dateString.split(" ");
    const [year, month, day] = datePart.split("-");
    const [hour, minute] = timePart ? timePart.split(":") : [0, 0];
    return new Date(year, month - 1, day, hour, minute);
  }
  const requiredFields = inputs
    .filter((input) => input.required)
    .map((input) => input.name);

  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("handsontable-container");

    const headerNames = inputs.map((input) => input.name);
    const rows = inputs.length;

    const invalidVals = [];

    const data = Array(rows)
      .fill()
      .map(() => Array(columns).fill(""));

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: headerNames,
      rowHeaderWidth: 250, // Adjust this value as needed
      afterGetRowHeader: function (row, TH) {
        // Force text wrapping for all row headers
        TH.style.whiteSpace = "normal";
        TH.style.overflow = "visible";
        TH.style.textAlign = "left";
      },
      colHeaders: Array(columns)
        .fill()
        .map((_, i) => `SKU ${i + 1}`),
      height: "100%",
      width: "100%",
      licenseKey: "non-commercial-and-evaluation",
      cells: function (row, col) {
        const cellProperties = {};
        const rowHeader = headerNames[row];
        const input = inputs.find((input) => input.name === rowHeader);
        if (input) {
          cellProperties.placeholder = input.placeholder || "";

          switch (input.type) {
            case "text":
              cellProperties.type = "text";
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "string" &&
                    value.length >= input.minLen &&
                    value.length <= input.maxLen);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.allowInvalid = true;
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              break;

            case "select":
              cellProperties.type = "dropdown";
              cellProperties.source = Array.isArray(input.options)
                ? input.options
                : Object.values(input.options);

              cellProperties.allowInvalid = true;
              cellProperties.validator = function (value, callback) {
                const isValid =
                  !value ||
                  value === "" ||
                  cellProperties.source.includes(value);
                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(true); // Always return true to allow any input
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.DropdownRenderer.apply(this, arguments);
                td.style.textAlign = "left";
                if (value === "" || value === null) {
                  td.innerHTML = input.placeholder || "";
                }
              };
              cellProperties.renderer = getRenderer(rowHeader);
              break;

            case "datetime":
              cellProperties.type = "text";
              cellProperties.editor = DateTimeEditor;
              cellProperties.allowInvalid = true; // Allow invalid entries temporarily
              cellProperties.validator = function (value, callback) {
                const isValid =
                  !value ||
                  value.trim() === "" ||
                  (parseDate(value) instanceof Date &&
                    !isNaN(parseDate(value)));

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(true); // Always return true to allow any input
              };
              cellProperties.renderer = getRenderer(rowHeader);
              break;


            case "number":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0" };
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "number" &&
                    value >= input.min &&
                    value <= input.max);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              cellProperties.allowInvalid = true;
              break;

            case "float":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0,0.00" };
              cellProperties.allowInvalid = true;
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "number" &&
                    value >= input.min &&
                    value <= input.max);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              break;
          }
        }

        return cellProperties;
      },
      momentDate: false,
      dateValidator: function (value, callback) {
        if (!value || value.trim() === "") {
          callback(true);
        } else {
          const date = parseDate(value);
          callback(date instanceof Date && !isNaN(date));
        }
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: "all",
      // Set the width of the row header column

      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
    });

    function updateInvalidVals(row, col, isValid, cellIdentifier) {
      const index = invalidVals.findIndex(
        (item) => item.row === row && item.col === col
      );
      if (!isValid && index === -1) {
        invalidVals.push({ row, col, cellIdentifier });
      } else if (isValid && index !== -1) {
        invalidVals.splice(index, 1);
      }
    }

    function getRenderer(rowHeader) {
      return function (instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        td.style.textAlign = "left";

        const isInvalid = invalidVals.some(
          (item) => item.row === row && item.col === col
        );
        td.style.backgroundColor = isInvalid ? "#ffcccc" : "";

        if (value === "" || value === null) {
          td.innerHTML = cellProperties.placeholder || "";
        }
      };
    }

    document.addEventListener("submit-handsontable", function () {
      const missingFields = [];

      // Check required fields
      for (let col = 0; col < columns; col++) {
        requiredFields.forEach((field) => {
          const rowIndex = headerNames.indexOf(field);
          if (rowIndex !== -1) {
            const cellValue = hot.getDataAtCell(rowIndex, col);
            if (!cellValue || cellValue === "") {
              missingFields.push(`${field} for SKU ${col + 1}`);
            }
          }
        });
      }

      if (missingFields.length > 0) {
        alert(
          `Please fill in the following required fields:\n${missingFields.join("\n")}`
        );
        return;
      }

      if (invalidVals.length > 0) {
        const invalidCells = invalidVals
          .map((item) => item.cellIdentifier)
          .join("\n");
        alert(`Please correct the following invalid values:\n${invalidCells}`);
        event.preventDefault(); // Prevent form submission
        return;
      }

      setupForm
        .querySelectorAll('input[type="hidden"]')
        .forEach((input) => input.remove());

      // Add hidden input for columns
      const columnsInput = document.createElement("input");
      columnsInput.type = "hidden";
      columnsInput.name = "columns";
      columnsInput.value = columns;
      setupForm.appendChild(columnsInput);

      const emailInput = document.createElement("input");
      emailInput.type = "hidden";
      emailInput.name = "email";
      emailInput.value = email;
      setupForm.appendChild(emailInput);

      // Add hidden inputs with Handsontable data
      const tableData = hot.getData();
      headerNames.forEach((header, rowIndex) => {
        const rowData = tableData[rowIndex];
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = header;
        input.value = JSON.stringify(rowData);
        setupForm.appendChild(input);
      });

      // Submit the form
      setupForm.submit();
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }
</style>
