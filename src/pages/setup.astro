---
import Layout from "../layouts/Layout.astro";
import { getSmartsheetData } from "./api/smartsheet";
import { inputs } from "../data/setup";
import { cellMappings } from "../data/setup";
import { d } from "../data/hierarchy";

const referer = Astro.request.headers.get("referer");
const isLinkClick = referer && new URL(referer).hostname === Astro.url.hostname;

if (isLinkClick === null) {
  return Astro.redirect("/");
}

let columns = Number(Astro.url.searchParams.get("numOfSKUs") || 1);
let email = Astro.url.searchParams.get("email");
const dept = JSON.stringify(
  Array(columns).fill(Astro.url.searchParams.get("department") || "")
);

const numDept = Astro.url.searchParams.get("department") || "";

const smartSheet = Astro.url.searchParams.get("subCategory") || "";

let selectedSmartsheet = smartSheet;

if (smartSheet === "") {  
  d.forEach((dept) => {
    if (String(dept.dept) === numDept) {
      selectedSmartsheet = dept.value;
    }
  });
}

if (!email) {
     alert("No email provided. Redirecting to home page.");
     return Astro.redirect("/");
}

if (columns > 50) {
  columns = 50;
} else if (columns <= 0) {
  columns = 1;
}

const { sampleData } = getSmartsheetData(selectedSmartsheet);

type SampleDataItem = string; // Adjust this type based on the actual data structure

const itemsToRemove: SampleDataItem[] = [
  "Product ID",
  "*Â Primary UPC",
  "SKU Owner",
  "Model Number",
  "RMS Long Description",
  "SKU Required in Advance",
  "Embargo Date",
];

const filteredSampleData = (sampleData as SampleDataItem[][]).map(
  (subArray: SampleDataItem[]) =>
    subArray.filter((item: SampleDataItem) => !itemsToRemove.includes(item))
);

// console.log(filteredSampleData[0]);
---

<Layout title="Setup">
  <main
    class="flex w-[89.5%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll"
    id="main"
  >
    <form action="/compliance" method="POST" id="setupForm" class="hidden">
      <input type="hidden" name="columns" value={columns} />
      <input type="hidden" name="email" value={email} />
      <!-- Product Data inputs -->
      <input type="hidden" name="dept" value={dept} />
      {
        inputs.map((input) => (
          <input type="hidden" name={input.name} value={[input.name]} />
        ))
      }
      <!-- Product Specs/Information inputs -->
      {
        filteredSampleData[0].map((row) => (
          <input type="hidden" name={row} value={[row]} />
        ))
      }

      <input
        type="hidden"
        name="Dangerous Product/Material"
        value={["testing"]}
      />
    </form>
    <div id="handsontable-container" class="w-full h-[400px]"></div>
  </main>
</Layout>

<script
  src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"
></script>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css"
/>

<script
  is:inline
  define:vars={{
    cellMappings,
    columns,
    email,
    inputs,
    filteredSampleData,
    selectedSmartsheet,
  }}
  type="module"
  defer
>
  class DateTimeEditor extends Handsontable.editors.TextEditor {
    constructor(hotInstance) {
      super(hotInstance);
    }

    createElements() {
      super.createElements();

      this.dateInput = document.createElement("input");
      this.dateInput.setAttribute("type", "date");
      this.dateInput.style.width = "150px";

      this.timeInput = document.createElement("input");
      this.timeInput.setAttribute("type", "time");
      this.timeInput.style.width = "120px";

      this.TEXTAREA.parentElement.appendChild(this.dateInput);
      this.TEXTAREA.parentElement.appendChild(this.timeInput);
      this.TEXTAREA.style.display = "none";

      const today = new Date().toISOString().split("T")[0];
      this.dateInput.setAttribute("min", today);
    }

    getValue() {
      return `${this.dateInput.value} ${this.timeInput.value}`;
    }

    setValue(value) {
      if (value && typeof value === "string") {
        const [date, time] = value.split(" ");
        this.dateInput.value = date;
        this.timeInput.value = time || "";
      } else {
        this.dateInput.value = "";
        this.timeInput.value = "";
      }
    }

    open() {
      super.open();
      const [date, time] = (this.originalValue || "").split(" ");
      this.dateInput.value = date || "";
      this.timeInput.value = time || "";
    }
  }

  function parseDate(dateString) {
    const [datePart, timePart] = dateString.split(" ");
    const [year, month, day] = datePart.split("-");
    const [hour, minute] = timePart ? timePart.split(":") : [0, 0];
    return new Date(year, month - 1, day, hour, minute);
  }
  const requiredFields = inputs
    .filter((input) => input.required)
    .map((input) => input.name);

  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("handsontable-container");

    const headerNames = inputs
      .map((input) => input.name)
      .concat(filteredSampleData[0]);
    const rows = inputs.length + filteredSampleData[0].length;

    const invalidVals = [];
    const readOnlyFields = ["Product Specs/Information", "Product Data"];

    const data = Array(rows)
      .fill()
      .map(() => Array(columns).fill(""));

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: headerNames,
      rowHeaderWidth: 250, // Adjust this value as needed
      afterGetRowHeader: function (row, TH) {
        const rowHeader = headerNames[row];
        if (readOnlyFields.includes(rowHeader)) {
          TH.style.fontWeight = "bold";
          TH.style.backgroundColor = "#c0c0c0";
        }
        // Force text wrapping for all row headers
        TH.style.whiteSpace = "normal";
        TH.style.overflow = "visible";
        TH.style.textAlign = "left";
      },
      afterChange: function (changes, source) {
        if (source !== "loadData") {
          updateFormInputs();
        }
      },
      colHeaders: Array(columns)
        .fill()
        .map((_, i) => `SKU ${i + 1}`),
      height: "100%",
      width: "100%",
      licenseKey: "non-commercial-and-evaluation",
      cells: function (row, col) {
        const cellProperties = {};
        const rowHeader = headerNames[row];
        const input = inputs.find((input) => input.name === rowHeader);
        if (input) {
          cellProperties.placeholder = input.placeholder || "";

          switch (input.type) {
            case "text":
              cellProperties.type = "text";
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "string" &&
                    value.length >= input.minLen &&
                    value.length <= input.maxLen);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.allowInvalid = true;
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              break;

            case "select":
              cellProperties.type = "dropdown";
              cellProperties.source = Array.isArray(input.options)
                ? input.options
                : Object.values(input.options);

              cellProperties.allowInvalid = false;
              cellProperties.validator = function (value, callback) {
                const isValid =
                  !value ||
                  value === "" ||
                  cellProperties.source.includes(value);
                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              break;

            case "datetime":
              cellProperties.type = "text";
              cellProperties.editor = DateTimeEditor;
              cellProperties.allowInvalid = true; // Allow invalid entries temporarily
              cellProperties.validator = function (value, callback) {
                const isValid =
                  !value ||
                  value.trim() === "" ||
                  (parseDate(value) instanceof Date &&
                    !isNaN(parseDate(value)));

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(true); // Always return true to allow any input
              };
              cellProperties.renderer = getRenderer(rowHeader);
              break;

            case "number":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0" };
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "number" &&
                    value >= input.min &&
                    value <= input.max);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              cellProperties.allowInvalid = true;
              break;

            case "float":
              cellProperties.type = "numeric";
              cellProperties.numericFormat = { pattern: "0,0.00" };
              cellProperties.allowInvalid = true;
              cellProperties.validator = function (value, callback) {
                const isValid =
                  value === null ||
                  value === "" ||
                  (typeof value === "number" &&
                    value >= input.min &&
                    value <= input.max);

                updateInvalidVals(
                  row,
                  col,
                  isValid,
                  `${rowHeader} for SKU ${col + 1}`
                );
                callback(isValid);
              };
              cellProperties.renderer = function (
                instance,
                td,
                row,
                col,
                prop,
                value,
                cellProperties
              ) {
                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                td.style.textAlign = "left";
              };
              break;

              case "readonly":
              if (rowHeader === "Product Specs/Information") {
                cellProperties.placeholder = selectedSmartsheet;
                cellProperties.renderer = function (
                  instance,
                  td,
                  row,
                  col,
                  prop,
                  value,
                  cellProperties
                ) {
                  Handsontable.renderers.TextRenderer.apply(this, arguments);
                  td.style.backgroundColor = "#c0c0c0";
                  td.style.textAlign = "center";
                  td.style.verticalAlign = "middle";
                  td.style.fontWeight = "bold";
                  
                  if (!value && cellProperties.placeholder) {
                    td.innerHTML = '<span style="color: black; font-weight: bold;">' + cellProperties.placeholder + '</span>';
                  }
                };
              } else {
                cellProperties.renderer = function (
                  instance,
                  td,
                  row,
                  col,
                  prop,
                  value,
                  cellProperties
                ) {
                  Handsontable.renderers.TextRenderer.apply(this, arguments);
                  td.style.backgroundColor = "#c0c0c0";
                  td.style.textAlign = "center";
                  td.style.verticalAlign = "middle";
                };
              }
              cellProperties.readOnly = true;
              break;
          }
        }

        return cellProperties;
      },
      momentDate: false,
      dateValidator: function (value, callback) {
        if (!value || value.trim() === "") {
          callback(true);
        } else {
          const date = parseDate(value);
          callback(date instanceof Date && !isNaN(date));
        }
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: "all",
      // Set the width of the row header column

      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
    });

    function updateInvalidVals(row, col, isValid, cellIdentifier) {
      const index = invalidVals.findIndex(
        (item) => item.row === row && item.col === col
      );
      if (!isValid && index === -1) {
        invalidVals.push({ row, col, cellIdentifier });
      } else if (isValid && index !== -1) {
        invalidVals.splice(index, 1);
      }
    }

    function getRenderer(rowHeader) {
      return function (instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        td.style.textAlign = "left";

        const isInvalid = invalidVals.some(
          (item) => item.row === row && item.col === col
        );
        td.style.backgroundColor = isInvalid ? "#ffcccc" : "";

        if (value === "" || value === null) {
          td.innerHTML = cellProperties.placeholder || "";
        }
      };
    }

    function updateFormInputs() {
      const tableData = hot.getData();
      const dangerousProduct = Array(columns).fill("N_0");

      headerNames.forEach((header, rowIndex) => {
        let input = setupForm.querySelector(`input[name="${header}"]`);
        if (!input) {
          input = document.createElement("input");
          input.type = "hidden";
          input.name = header;
          setupForm.appendChild(input);
        }

        // console.log(header);
        const rowData = tableData[rowIndex];
        input.value = JSON.stringify(rowData);

        if (header === "Has Battery" || header === "Has Limited Quantities") {
          console.log(`Checking ${header}:`, rowData);
          rowData.forEach((value, colIndex) => {
            if (value === "Y") {
              console.log(
                `${header} is Y for column ${colIndex}, setting dangerousProduct to Y_1`
              );
              dangerousProduct[colIndex] = "Y_1";
            }
          });
        }
      });

      // Update the Dangerous Product/Material input after the loop
      const dangerousInput = setupForm.querySelector(
        'input[name="Dangerous Product/Material"]'
      );
      if (dangerousInput) {
        dangerousInput.value = JSON.stringify(dangerousProduct);
        console.log("Updated Dangerous Product/Material to:", dangerousProduct);
      } else {
        console.error("Couldn't find Dangerous Product/Material input");
      }
    }

    // Initial form population
    updateFormInputs();

    /**
     * Validates the Handsontable data before form submission.
     *
     * This function performs two main checks:
     * 1. Ensures all required fields are filled out for each SKU.
     * 2. Verifies that all cell values are of the correct data type and format.
     *
     * If any required fields are missing or any values are invalid, it prevents
     * form submission and displays an alert to the user with the specific issues.
     *
     * If all validations pass, it allows the form to be submitted.
     */
    document.addEventListener("submit-handsontable", function () {
      const missingFields = [];

      // Check required fields
      for (let col = 0; col < columns; col++) {
        requiredFields.forEach((field) => {
          const rowIndex = headerNames.indexOf(field);
          if (rowIndex !== -1) {
            const cellValue = hot.getDataAtCell(rowIndex, col);
            if (!cellValue || cellValue === "") {
              missingFields.push(`${field} for SKU ${col + 1}`);
            }
          }
        });
      }

      if (missingFields.length > 0) {
        alert(
          `Please fill in the following required fields:\n${missingFields.join("\n")}`
        );
        return;
      }

      if (invalidVals.length > 0) {
        const invalidCells = invalidVals
          .map((item) => item.cellIdentifier)
          .join("\n");
        alert(`Please correct the following invalid values:\n${invalidCells}`);
        event.preventDefault(); // Prevent form submission
        return;
      }

      document.getElementById("spinner")?.classList.remove("hidden"); 
      // Submit the form
      setupForm.submit();
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }
</style>
