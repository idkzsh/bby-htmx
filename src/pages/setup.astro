---
import Layout from "../layouts/Layout.astro";
import Sidebar from "../components/Sidebar.astro";
import SetupColumn from "../components/SetupColumn.astro";
import { headers, inputs } from "../data/setup";
import Spacer from "../components/Spacer.astro";
import Spinner from "../components/ui/spinner.astro"
import { supabase } from "../lib/supabase";
import * as xlsx from "xlsx";

// const { cookies, redirect } = Astro;

// const accessToken = cookies.get("sb-access-token");
// const refreshToken = cookies.get("sb-refresh-token");

// if (!accessToken || !refreshToken) {
//   return redirect("/");
// }

// const { data, error } = await supabase.auth.setSession({
//   refresh_token: refreshToken.value,
//   access_token: accessToken.value,
// });

// if (error) {
//   cookies.delete("sb-access-token", {
//     path: "/",
//   });
//   cookies.delete("sb-refresh-token", {
//     path: "/",
//   });

//   return redirect("/");
// }

let columns = Number(Astro.url.searchParams.get("numOfSKUs") || 1);

if (columns > 50) {
  columns = 50;
}

let excelData;


if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const excelFile = data.get("excelFileInput");
    await new Promise((resolve) => setTimeout(resolve, 1000));
    if (excelFile instanceof File) {
      const fileBuffer = await excelFile.arrayBuffer();
      const workbook = xlsx.read(fileBuffer, { type: "array" });
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      excelData = xlsx.utils.sheet_to_json(worksheet);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      excelData = null;
    }
  } 
}
---

<Layout title="Setup">
  <main
    class="flex w-[90%] h-[98%] bg-white mt-2 rounded-md border tracking-tight overflow-scroll" id="main"
  >
<!-- <Sidebar obj={headers} /> -->
  <div id="handsontable-container" class="w-full h-[400px]"></div>
      <!-- <form
        class="flex items-center justify-center gap-2 w-[600px]"
        id="uploadForm"
        name="uploadForm"
        method="POST"
        enctype="multipart/form-data"
      >
        Import Excel File: <input
          type="file"
          class="flex items-center justify-center pt-[2px] pl-[2px] w-60 rounded-md h-8"
          id="excelFileInput"
          name="excelFileInput"
          accept=".csv, .xlsx, .xlsb"
        />
        <input type="hidden" name="columns" value={columns} />
        <div class="relative w-24">
          <button class="btn text-xs" type="submit" @click="loading = true" :disabled="!fileSelected">Upload</button>
        </div>
      </form> -->

      <!-- <Sidebar obj={headers} />
      <SetupColumn
      obj={inputs}
      columns={columns}
      formName="setupForm"
      data={excelData}
    /> -->
  </main>
</Layout>

<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />

<script define:vars={{ headers, columns }}>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('handsontable-container');
    
    const headerNames = Object.keys(headers);
    const rows = headerNames.length;
    
    const data = Array(rows).fill().map(() => Array(columns).fill(''));

    const hot = new Handsontable(container, {
      data: data,
      rowHeaders: headerNames,
      colHeaders: Array(columns).fill().map((_, i) => `SKU ${i + 1}`),
      height: '100%',
      width: '100%',
      licenseKey: 'non-commercial-and-evaluation',
      cells: function(row, col) {
        const cellProperties = {};
        const rowHeader = headerNames[row];
        cellProperties.placeholder = headers[rowHeader];
        
        // Add validator for VPN row
        const requiredFields = ['Vendor Part Number', 'UPC', 'SKU Title (Long)'];
        
        // Add required validator to specified fields
        if (requiredFields.includes(rowHeader)) {
          cellProperties.validator = function(value, callback) {
            callback(value !== null && value !== '');
          };
          cellProperties.allowEmpty = false;
        }

        switch (rowHeader) {
          case 'Vendor Part Number':
            cellProperties.validator = function(value, callback) {
              if (value.length <= 20) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
            case 'SKU Title (Long)':
            cellProperties.validator = function(value, callback) {
              if (value.length <= 40) {
                callback(true);
              } else {
                callback(false);
              }
            };
            cellProperties.allowInvalid = false;
            break;
            case 'UPC':
            cellProperties.validator = function(value, callback) {
              const numericValue = value.toString().replace(/\D/g, '');
              const isValid = numericValue.length >= 12 && numericValue.length <= 13;
              callback(isValid);
            };
            cellProperties.allowInvalid = false;
            break;
        }

        
        return cellProperties;
      },
      manualColumnResize: true,
      manualColumnResizeMinWidth: 100,
      manualColumnMove: true,
      stretchH: 'all',
      // Set the width of the row header column
      rowHeaderWidth: 250,
      // Allow row header resizing
      manualRowResize: true,
      // Prevent horizontal scrolling within cells
      wordWrap: true,
      // Optional: Adjust cell padding for better text visibility
      cellPadding: 5,
      
    });
  });
</script>

<style>
  /* Optional: Add custom styles to improve header visibility */
  .handsontable th {
    white-space: normal;
    overflow-wrap: break-word;
  }
</style>